name: CI/CD for Spring Boot with Maven

env:
  MONGO_DATABASE: ${{secrets.MONGO_DATABASE}}
  MONGO_USER: ${{secrets.MONGO_USER}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}
  MONGO_CLUSTER: ${{secrets.MONGO_CLUSTER}}
  AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
  AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY}}
  AWS_REGION: ${{secrets.AWS_REGION}}
  AWS_BUCKET_NAME: ${{secrets.AWS_BUCKET_NAME}}
  AWS_BUCKET_URL: ${{secrets.AWS_BUCKET_URL}}
  JWT_SECRET: ${{secrets.JWT_SECRET}}
  JWT_EXPIRATION_MS: ${{secrets.JWT_EXPIRATION_MS}}
  JWT_REFRESH_EXPIRATION_MS: ${{secrets.JWT_REFRESH_EXPIRATION_MS}}
  CORS_LINK: ${{secrets.CORS_LINK}}

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Build with Maven
        run: mvn clean package

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packaged-application
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: packaged-application
          path: .

      - name: Setup SSH Key
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        run: |
          echo "$DEPLOY_KEY" > $HOME/key.pem
          chmod 400 $HOME/key.pem

      - name: Rename JAR File before upload to EC2
        run: |
          mv *.jar flavor-forge.jar

      - name: Kill any running Flavor Forge App instance
        run: |
          ssh -o StrictHostKeyChecking=no -i $HOME/key.pem ubuntu@${{ secrets.DEPLOY_HOST }} << 'EOF'
          pkill -f flavor-forge.jar || true
          EOF

      - name: Copy JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_KEY }}
          source: "*.jar"
          target: "/home/ubuntu/deployment/"

      - name: Persist Environment Variables on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i $HOME/key.pem ubuntu@${{ secrets.DEPLOY_HOST }} << 'EOF'
          
          # Create or overwrite the .env file
          cat <<EOT > /home/ubuntu/deployment/.env
          MONGO_DATABASE=${{ secrets.MONGO_DATABASE }}
          MONGO_USER=${{ secrets.MONGO_USER }}
          MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
          MONGO_CLUSTER=${{ secrets.MONGO_CLUSTER }}
          AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_URL=${{ secrets.AWS_BUCKET_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_MS=${{ secrets.JWT_EXPIRATION_MS }}
          JWT_REFRESH_EXPIRATION_MS=${{ secrets.JWT_REFRESH_EXPIRATION_MS }}
          CORS_LINK=${{ secrets.CORS_LINK }}
          EOT
          EOF

      - name: Restart Application
        run: |
          ssh -o StrictHostKeyChecking=no -i $HOME/key.pem ubuntu@${{ secrets.DEPLOY_HOST }} << 'EOF'
          
          # Export environment variables from .env
          export $(cat /home/ubuntu/deployment/.env | xargs)
          
          # Generate a timestamp for the log file
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          
          # Start the application in the background
          nohup java -jar /home/ubuntu/deployment/flavor-forge.jar > /home/ubuntu/deployment/logs/flavor-forge_$TIMESTAMP.log 2>&1 &
          
          # Reload nginx
          sudo systemctl reload nginx
          EOF
